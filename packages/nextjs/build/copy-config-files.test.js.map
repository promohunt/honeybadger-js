{"version":3,"file":"copy-config-files.test.js","sourceRoot":"","sources":["../src/copy-config-files.test.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,SAAS,CAAA;AAC1B,OAAO,EAAE,MAAM,IAAI,CAAA;AACnB,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAEjC,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,OAAO,EAAE,CAAA;IAChB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,OAAO,EAAE;gBACP,UAAU,EAAE,eAAe;aAC5B;SACF,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACnD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,UAAU,EAAE,eAAe;aAC5B;SACF,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACvD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;QACxF,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,OAAO,EAAE;oBACP,UAAU,EAAE,eAAe;iBAC5B;aACF;SACF,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACvD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;QACtF,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,KAAK,EAAE;oBACL,UAAU,EAAE,eAAe;iBAC5B;aACF;SACF,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACpD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC3D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACjD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,OAAO,EAAE;gBACP,UAAU,EAAE,eAAe;aAC5B;YACD,eAAe,EAAE,eAAe;SACjC,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACpD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACpD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACpD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,UAAU,EAAE,eAAe;aAC5B;YACD,eAAe,EAAE,eAAe;SACjC,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACjD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;QACnG,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,OAAO,EAAE;oBACP,UAAU,EAAE,eAAe;iBAC5B;aACF;YACD,eAAe,EAAE,eAAe;SACjC,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACrD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;QACjG,IAAI,CAAC;YACH,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAClE,KAAK,EAAE;gBACL,KAAK,EAAE;oBACL,UAAU,EAAE,eAAe;iBAC5B;aACF;YACD,eAAe,EAAE,eAAe;SACjC,CAAC,CAAA;QAEF,MAAM,eAAe,EAAE,CAAA;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACjE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACrD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACrD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC5D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACnD,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAA","sourcesContent":["import mock from 'mock-fs'\nimport fs from 'fs'\nimport path from 'path'\nimport { copyConfigFiles } from './copy-config-files';\ndescribe('copy-config-files', () => {\n\n  afterEach(() => {\n    mock.restore()\n  })\n\n  it('should copy config files to a project with pages router', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'pages': {\n        'index.js': 'dummy content'\n      }\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('pages/_error.js')).toBe(true)\n    expect(fs.existsSync('app/error.js')).toBe(false)\n  })\n\n  it('should copy config files to a project with app router', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'app': {\n        'index.js': 'dummy content'\n      }\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('app/error.js')).toBe(true)\n    expect(fs.existsSync('app/global-error.js')).toBe(true)\n    expect(fs.existsSync('pages/_error.js')).toBe(false)\n  })\n\n  it('should copy config files to a project with pages router under src folder', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'src': {\n        'pages': {\n          'index.js': 'dummy content'\n        }\n      }\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('src/pages/_error.js')).toBe(true)\n    expect(fs.existsSync('pages/_error.js')).toBe(false)\n  })\n\n  it('should copy config files to a project with app router under src folder', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'src': {\n        'app': {\n          'index.js': 'dummy content'\n        }\n      }\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('src/app/error.js')).toBe(true)\n    expect(fs.existsSync('src/app/global-error.js')).toBe(true)\n    expect(fs.existsSync('app/error.js')).toBe(false)\n    expect(fs.existsSync('app/global-error.js')).toBe(false)\n  })\n\n  it('should copy config files to a typescript project with pages router', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'pages': {\n        'index.ts': 'dummy content'\n      },\n      'tsconfig.json': 'dummy content'\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('pages/_error.tsx')).toBe(true)\n    expect(fs.existsSync('pages/_error.js')).toBe(false)\n    expect(fs.existsSync('app/error.tsx')).toBe(false)\n  })\n\n  it('should copy config files to a typescript project with app router', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'app': {\n        'index.ts': 'dummy content'\n      },\n      'tsconfig.json': 'dummy content'\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('app/error.tsx')).toBe(true)\n    expect(fs.existsSync('app/global-error.tsx')).toBe(true)\n    expect(fs.existsSync('app/error.js')).toBe(false)\n    expect(fs.existsSync('app/global-error.js')).toBe(false)\n    expect(fs.existsSync('pages/error.tsx')).toBe(false)\n  })\n\n  it('should copy config files to a typescript project with pages router under src folder', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'src': {\n        'pages': {\n          'index.ts': 'dummy content'\n        },\n      },\n      'tsconfig.json': 'dummy content'\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('src/pages/_error.tsx')).toBe(true)\n    expect(fs.existsSync('src/pages/_error.js')).toBe(false)\n    expect(fs.existsSync('pages/_error.tsx')).toBe(false)\n    expect(fs.existsSync('pages/_error.js')).toBe(false)\n  })\n\n  it('should copy config files to a typescript project with app router under src folder', async () => {\n    mock({\n      'templates': mock.load(path.resolve(__dirname, '..', 'templates')),\n      'src': {\n        'app': {\n          'index.ts': 'dummy content'\n        },\n      },\n      'tsconfig.json': 'dummy content'\n    })\n\n    await copyConfigFiles()\n\n    expect(fs.existsSync('honeybadger.browser.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.edge.config.js')).toBe(true)\n    expect(fs.existsSync('honeybadger.server.config.js')).toBe(true)\n    expect(fs.existsSync('src/app/error.tsx')).toBe(true)\n    expect(fs.existsSync('src/app/global-error.tsx')).toBe(true)\n    expect(fs.existsSync('src/app/error.js')).toBe(false)\n    expect(fs.existsSync('src/app/global-error.js')).toBe(false)\n    expect(fs.existsSync('app/error.tsx')).toBe(false)\n    expect(fs.existsSync('app/error.js')).toBe(false)\n  })\n\n})\n"]}