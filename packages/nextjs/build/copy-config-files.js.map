{"version":3,"file":"copy-config-files.js","sourceRoot":"","sources":["../src/copy-config-files.ts"],"names":[],"mappings":"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","sourcesContent":["const path = require('path')\nconst fs = require('fs')\n\nconst debug = process.env.HONEYBADGER_DEBUG === 'true'\n\nfunction usesTypescript() {\n  return fs.existsSync('tsconfig.json')\n}\n\nfunction usesSrcFolder() {\n  return fs.existsSync('src')\n}\n\nfunction usesPagesRouter(isUnderSrc: boolean) {\n  const srcFolder = isUnderSrc ? 'src' : ''\n\n  return fs.existsSync(path.join(srcFolder, 'pages'))\n}\n\nfunction usesAppRouter(isUnderSrc: boolean) {\n  const srcFolder = isUnderSrc ? 'src' : ''\n\n  return fs.existsSync(path.join(srcFolder, 'app'))\n}\n\nfunction getTargetPath(isUnderSrc: boolean, isAppRouter = false, isGlobalErrorComponent = false) {\n  if (!isAppRouter && isGlobalErrorComponent) {\n    throw new Error('invalid arguments: isGlobalErrorComponent can only be true when isAppRouter is true')\n  }\n\n  const extension = usesTypescript() ? 'tsx' : 'js'\n  let srcFolder = isUnderSrc ? 'src' : ''\n  srcFolder = path.join(srcFolder, isAppRouter ? 'app' : 'pages')\n\n  let fileName = ''\n  if (isAppRouter) {\n    fileName = isGlobalErrorComponent ? 'global-error' : 'error'\n  }\n  else {\n    fileName = '_error'\n  }\n\n  return path.join(srcFolder, fileName + '.' + extension)\n}\n\nfunction getTemplate(isAppRouter = false, isGlobalErrorComponent = false) {\n  if (!isAppRouter && isGlobalErrorComponent) {\n    throw new Error('invalid arguments: isGlobalErrorComponent can only be true when isAppRouter is true')\n  }\n\n  const extension = isGlobalErrorComponent ? 'tsx' : 'js'\n  const templateName = isAppRouter ? '_error_app_router' : '_error'\n\n  return path.resolve(__dirname, '../templates', templateName + '.' + extension)\n}\n\nasync function copyErrorJs(isUnderSrc: boolean, isAppRouter = false) {\n  const sourcePath = getTemplate(isAppRouter)\n  const targetPath = getTargetPath(isUnderSrc, isAppRouter)\n\n  return copyFileWithBackup(sourcePath, targetPath)\n}\n\nfunction copyGlobalErrorJs(isUnderSrc: boolean) {\n  const sourcePath = getTemplate(true, true)\n  const targetPath = getTargetPath(isUnderSrc, true, true)\n\n  return copyFileWithBackup(sourcePath, targetPath)\n}\n\nasync function copyFileWithBackup(sourcePath, targetPath) {\n  const fileAlreadyExists = fs.existsSync(targetPath)\n  if (fileAlreadyExists) {\n    // Don't overwrite an existing file without creating a backup first\n    const backupPath = targetPath + '.bak'\n    if (debug) {\n      console.debug('backing up', targetPath, 'to', backupPath)\n    }\n    await fs.promises.copyFile(targetPath, backupPath)\n  }\n\n  if (debug) {\n    console.debug('copying', sourcePath, 'to', targetPath)\n  }\n\n  return fs.promises.copyFile(sourcePath, targetPath)\n}\n\nexport async function copyConfigFiles() {\n  if (debug) {\n    console.debug('cwd', process.cwd())\n  }\n\n  const templateDir = path.resolve(__dirname, '../templates')\n  const configFiles = [\n    'honeybadger.browser.config.js',\n    'honeybadger.edge.config.js',\n    'honeybadger.server.config.js',\n  ]\n\n  const copyPromises = configFiles.map((file) => {\n    if (debug) {\n      console.debug('copying', file)\n    }\n    return fs.promises.copyFile(path.join(templateDir, file), file)\n  })\n\n  const isUnderSrcFolder = usesSrcFolder()\n\n  if (usesPagesRouter(isUnderSrcFolder)) {\n    copyPromises.push(copyErrorJs(isUnderSrcFolder, false))\n  }\n\n  if (usesAppRouter(isUnderSrcFolder)) {\n    copyPromises.push(copyErrorJs(isUnderSrcFolder, true))\n    copyPromises.push(copyGlobalErrorJs(isUnderSrcFolder))\n  }\n\n  await Promise.all(copyPromises);\n\n  console.log('Done copying config files.')\n}\n"]}